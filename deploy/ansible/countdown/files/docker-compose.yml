version: '3'

services:
  reverse-proxy:
    image: traefik # The official Traefik docker image
    command: --api --docker # Enables the web UI and tells Tr√¶fik to listen to docker
    restart: always
    ports:
      - "80:80"     # The HTTP port
      - "8080:8080" # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
    labels:
      - "traefik.enable=false"

  # celery:
  #   build:
  #     context: .
  #     dockerfile: ./celery/Dockerfile
  #   command: celery -A backend.src.server.flask_server.celery worker --loglevel=info
  #   restart: always
  #   depends_on:
  #    - redis

  flaskserver:
    build:
      context: .
      dockerfile: ./flask_server/Dockerfile
    restart: always
    ports:
      - 8888:8888
    labels:
    - "traefik.enable=true"
    - "traefik.backend=flaskserver"
    - "traefik.frontend.rule=Host:flaskserver.docker"
    - "traefik.backend.loadbalancer.method=drr"
    depends_on:
     - celery

  # redis:
  #   image: redis:alpine
  #   container_name: redis
  #   labels:
  #    - "traefik.enable=false"
  #   restart: always

  frontend:
    build:
     context: .
     dockerfile: ./web/Dockerfile
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.backend=frontend"
      - "traefik.frontend.rule=Host:frontend.docker"
      - "traefik.backend.loadbalancer.method=drr"
    depends_on:
     - flaskserver

  socketio:
   build:
    context: .
    dockerfile: ./flask_socketio_server/Dockerfile
   restart: always
   ports:
      - 8000:8000
   labels:
    - "traefik.enable=true"
    - "traefik.backend=flasksocketio"
    - "traefik.frontend.rule=Host:flasksocketio.docker"
    - "traefik.backend.loadbalancer.stickiness=true"
    - "traefik.backend.loadbalancer.method=drr"
   depends_on:
    - redis
    - celery

  portainer:
    image: portainer/portainer
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

volumes:
  portainer_data:
